shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
str(iris)
library(plotly)
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width)
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, type = "scatter")
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers")
p1
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers")
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers") %>%
add_trace(name = "Sepal")
p1
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers") %>%
add_trace(y = 2, name = "my line")
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers", name = "Sepal") %>%
add_trace(y = 2, name = "my line")
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE)
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE) %>%
layout(xaxis = list(title = "a"),yaxis = list(title = "b"))
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE) %>%
layout(xaxis = list(title = "a"),yaxis = list(title = "b"), name = "hello")
p2
str(mtcars)
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p <- plot_ly(economics, x = date, y = unemploy / pop)
p
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "hello")
p
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
seq(0,8)
rnorm(8)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p1
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
p1
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,11), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(1,9), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(0,9), y = rnorm(9), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
p2 < plot_ly(x = seq(0,8), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers", name = "Trace3") %>%
add_trace(x = Petal.Length, y = Petal.Width, mode = "markers", name = "Trace4")
p2
p2 < plot_ly(economics, x = date, y = unemploy / pop, type = "scatter", mode = "markers+lines")
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p <- add_trace(p, y = fitted(m), name = "loess")
p
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
library(plotly)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw") %>%
add_trace(p, y = fitted(m), name = "loess")
subplot(p1,p2, nrows = 2)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
my_names <- c("name1","name2","name3","name4")
my_names[1]
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[2])
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = my_names[3])
p2 <- add_trace(p, y = fitted(m), name = my_names[4])
subplot(p1,p2, nrows = 2)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
subplot(p1,p2, nrows = 2)
library(plotly)
my_names <- c("name1","name2","name3","name4")
plots <- list()
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
for (j in 1:2) {
plots[[2*j-1]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
plots[[2*j]] <- economics %>%
plot_ly(x = date, y = unemploy / pop, names = my_names[j]) %>%
add_trace(y = fitted(m), names = my_names[j])
}
for (j in 1:4) {
plots[[2*j-1]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
for (j in 1:4) {
plots[[j]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
plots[[1]]
for (j in 1:1) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
for (j in 2:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
for (j in 3:3) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[3]]
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
plots[[j]]
}
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
plots[[2]]
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[4])
do.call(subplot,c(plots,nrows=4))
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[2]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[3]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[4]) %>%
add_trace(y = rnorm(8), name = my_names[4])
do.call(subplot,c(plots,nrows=4))
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1])
plots[[1]]
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
for (j in 1:1) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
for (j in 2:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[2]]
for (j in 1:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[2]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[3]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[4]) %>%
add_trace(y = rnorm(8), name = my_names[4])
plots[[1]]
plots[[2]]
do.call(subplot,c(plots,nrows=4))
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
do.call(subplot,c(plots,nrows=4))
list(1,2,3)
plots <- lapply(c(1,2,3,4), function(j) plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j]))
library(plotly)
plots <- lapply(c(1,2,3,4), function(j) plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j]))
do.call(subplot,c(plots,nrows=4))
1:4
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('Desktop/updated ui and server')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
system.time(plot(x=c(1,2),y=c(3,4)))
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
paste("he","llo")
paste("he","/n","llo")
paste("he",/n,"llo")
paste(1, 1, sep='\n')
cat(paste(1,1,sep = '\n'))
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
allfiles <- list.files()
allfiles
num <- 0
filenaming <- "msstatsqc"
finalfile <- "msstatsqc.log"
while(is.element(finalfile,allfiles)) {
num <- num+1
finalfile <- paste(paste(filenaming,num,sep="-"),".log",sep="")
}
paste(filenaming,num,sep="-")
paste(paste(filenaming,num,sep="-"),".log",sep="")
session <- sessionInfo()
sink("sessionInfo.txt")
print(session)
sink()
processout <- as.matrix(read.table("sessionInfo.txt", header=T, sep="\t"))
View(processout)
write.table(processout, file=finalfile, row.names=FALSE)
processout <- rbind(processout, as.matrix(c(" "," ","MSstats - dataProcess function"," "),ncol=1))
session
allfiles <- list.files()
num <- 0
filenaming <- "msstatsqc"
finalfile <- "msstatsqc.log"
while(is.element(finalfile,allfiles)) {
num <- num+1
finalfile <- paste(paste(filenaming,num,sep="-"),".log",sep="")
}
session <- sessionInfo()
sink("sessionInfo.txt")
print(session)
sink()
processout <- as.matrix(read.table("sessionInfo.txt", header=T, sep="\t"))
write.table(processout, file=finalfile, row.names=FALSE)
processout <- rbind(processout, as.matrix(c(" "," ","MSstatsqc - dataProcess function"," "),ncol=1))
processout
runApp('GitHub/msstats-qc')
requiredinput <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
toupper(requiredinput)
requiredinput <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
requiredInputUpper <- toupper(requiredinput)
raw <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
if (all(requiredInputUpper %in% providedInputUpper)) {
processout <- rbind(processout, c("The required input : provided - okay"))
write.table(processout, file = finalfile, row.names = FALSE)
}
else if (all(setdiff(requiredInputUpper, "PEPTIDESEQUENCE") %in% providedInputUpper)
&& "PEPTIDEMODIFIEDSEQUENCE" %in% providedInputUpper) {
if (all(requiredInputUpper %in% providedInputUpper)) {
processout <- rbind(processout, c("The required input : provided - okay"))
write.table(processout, file = finalfile, row.names = FALSE)
} else if (all(setdiff(requiredInputUpper, "PEPTIDESEQUENCE") %in% providedInputUpper)
&& "PEPTIDEMODIFIEDSEQUENCE" %in% providedInputUpper) {
processout <- rbind(processout, c("The required input : provided - okay"))
write.table(processout, file = finalfile, row.names = FALSE)
all(requiredInputUpper %in% providedInputUpper)
processout <- rbind(processout, c("The required input : provided - okay"))
View(processout)
write.table(processout, file = finalfile, row.names = FALSE)
View(processout)
setdiff(requiredInputUpper, "PEPTIDESEQUENCE")
raw <- c("ProteinName", "Peptideequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
all(requiredInputUpper %in% providedInputUpper)
raw <- c("ProteinName", "Peptideequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
requiredInputUpper <- toupper(requiredinput)
providedInputUpper <- toupper(raw)
requiredinput <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
raw <- c("ProteinName", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
requiredInputUpper <- toupper(requiredinput)
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
requiredinput <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
raw <- c("ProteinName","Hello", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
requiredInputUpper <- toupper(requiredinput)
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
raw <- c("ProteinName","Peptide", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
raw <- c("ProteinName","Peptideequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
raw <- c("ProteinName", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
setdiff(requiredInputUpper, "PEPTIDESEQUENCE")
"PEPTIDEMODIFIEDSEQUENCE" %in% providedInputUpper
setdiff("hello","hlo")
setdiff("hello","helo")
setdiff("hello","heloo")
x <- c(sort(sample(1:20, 9)), NA)
x
y <- c(sort(sample(3:23, 7)), NA)
y
setdiff(y, x)
setdiff(x, y)
setdiff(requiredInputUpper, "PEPTIDESEQUENCE")
setdiff(requiredInputUpper, "PEPTIDESEQUENCE") %in% providedInputUpper
all(setdiff(requiredInputUpper, "PEPTIDESEQUENCE") %in% providedInputUpper)
"PEPTIDEMODIFIEDSEQUENCE" %in% providedInputUpper
TRUE && FALSE
raw <- c("ProteinName", "PeptideModifiedSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
all(setdiff(requiredInputUpper, "PEPTIDESEQUENCE") %in% providedInputUpper
)
"PEPTIDEMODIFIEDSEQUENCE" %in% providedInputUpper
raw <- c("ProteinName", "Peptideequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
providedInputUpper <- toupper(raw)
requiredInputUpper %in% providedInputUpper
!(requiredInputUpper %in% providedInputUpper)
which(!(requiredInputUpper %in% providedInputUpper))
missedInput <- which(!(requiredInputUpper %in% providedInputUpper))
paste(requiredinput[missedInput], collapse = ", ")
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
shiny::runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
requiredinput <- c("ProteinName", "PeptideSequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
raw <- c("ProteinName", "Peptideequence", "PrecursorCharge",
"FragmentIon", "ProductCharge", "IsotopeLabelType",
"Condition", "BioReplicate", "Run", "Intensity")
requiredInputUpper <- toupper(requiredinput)
providedInputUpper <- toupper(raw)
all(requiredInputUpper %in% providedInputUpper)
!all(requiredInputUpper %in% providedInputUpper)
which(!(requiredInputUpper %in% providedInputUpper))
required <- c("my","shiny","app")
raw <- c("shiny","my","app")
all(required %in% raw)
raw <- c("app","my","shiny")
required <- c("my","shiny","app")
all(required %in% raw)
required <- c("my","shiny","app")
raw <- c("app","my","shiny","hello")
all(required %in% raw)
raw <- c("app","my","shiny","hello","bye")
all(required %in% raw)
raw <- c("app","my","shny","hello","bye")
all(required %in% raw)
which(!(required %in% raw))
shiny::runApp('GitHub/msstats-qc')
runApp('R/SProCoP/source.Shinyapp.qcmylcms.com')
runApp('GitHub/msstats-qc')
source('~/Downloads/required packages.R')
source('~/Downloads/required packages_advanced.R')
