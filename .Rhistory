runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('R/shiny examples/emtehani')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
gg <- ggplotly(p)
gg
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut))
gg <- ggplotly(p)
gg
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
library("gridExtra")
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('R/shiny examples/download base plot in shiny')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('R/shiny examples/emtehani')
runApp('R/shiny examples/emtehani')
runApp('R/shiny examples/emtehani')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
head(airquality)
data <- airquality
View(data)
data[4:10,3] <- rep(NA,7)
data[1:5,4] <- NA
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(data,2,pMiss)
install.packages("mice")
library("mice", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
md.pattern
md.pattern(data)
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages("gplots")
install.packages("gplots")
install.packages("lme4")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages("minpack.lm")
source("http://bioconductor.org/biocLite.R")
biocLite(c("limma","marray","preprocessCore","MSnbase"))
install.packages(pkgs="[LocalPath]/MSstats_3.3.11.tar.gz",repos=NULL,type="source")
remove.packages("MSstats")
source("http://bioconductor.org/biocLite.R")
biocLite(c("limma","marray","preprocessCore","MSnbase"))
install.packages(pkgs="[LocalPath]/MSstats_3.3.11.tar.gz",repos=NULL,type="source")
getwd()
install.packages(pkgs="/Users/sarataheri/Downloads/MSstats_3.3.11.tar.gz",repos=NULL,type="source")
library(MSstats)
library("MSstats", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("MSstats", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?MSstats
remove.packages("Rcpp")
install.packages("Rcpp")
library(MSstats)
library(MSstats)
?MSstats
install.packages(c("psych", "dplyr"))
source('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/317D4713-35DA-41E2-A4AA-620FD07D63B4/required packages.R')
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("limma","marray","preprocessCore","MSnbase"))
?MSstats
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
install.packages(c("gplots", "lme4", "ggplot2", "reshape", "reshape2",
install.packages(c("gplots","lme4","ggplot2","reshape", "reshape2", "data.table","Rcpp", "ggrepel", "survival", "minpack.lm"))
tempData <- mice(data,m=5,maxit=50,meth='pmm',seed=500)
library("VIM")
install.packages("VIM")
library("VIM")
tempData <- mice(data,m=5,maxit=50,meth='pmm',seed=500)
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
library("MSstats", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
gg <- ggplotly(p)
gg
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
?ggplotly
runApp('Desktop/updated ui and server')
matrix(1:2, ncol=2, byrow = TRUE)
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('R/SProCoP/source.Shinyapp.qcmylcms.com')
runApp('R/SProCoP/source.Shinyapp.qcmylcms.com')
runApp('R/SProCoP/source.Shinyapp.qcmylcms.com')
runApp('R/SProCoP/source.Shinyapp.qcmylcms.com')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
p1 <- plot_ly(economics, x = date, y = uempmed, showlegend = F)
p2 <- plot_ly(economics, x = date, y = unemploy, showlegend = F)
subplot(p1, p2, p1, p2, nrows = 2)
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
head(mtcars)
ggplot(mtcars, aes(x = mpg, y = cyl))
ggplot(mtcars, aes(x = mpg, y = cyl))+geom_point()
head(iris)
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
g1<-ggplot(mpg, aes(displ, hwy, color=factor(year)))+geom_point()
g2<-ggplot(mpg, aes(cyl, hwy, color=factor(year)))+geom_point()
# See both in the same screen
subplot( plot_ly(g1), plot_ly(g2)    )
g1<-ggplot(mpg, aes(displ, hwy, color=factor(year)))+geom_point()
g2<-ggplot(mpg, aes(cyl, hwy, color=factor(year)))+geom_point()
g1
g2
subplot( plot_ly(g1), plot_ly(g2)    )
g1
g2
subplot( plot_ly(g1), plot_ly(g2)    )
g1
g2
subplot( plot_ly(g1), plot_ly(g2)    )
subplot( plotly(g1), plotly(g2)    )
runApp('Desktop/updated ui and server')
g1<-ggplot(mpg, aes(displ, hwy, color=factor(year)))+geom_point()
g2<-ggplot(mpg, aes(cyl, hwy, color=factor(year)))+geom_point()
g1
plot_ly(g1)
g1
plot_ly(g1)
str(plot_ly(g1))
plot_ly(g2)
subplot(plot_ly(g1),plot_ly(g2))
g1
g2
subplot(plot_ly(g1),plot_ly(g2))
p1 <- plot_ly(economics, x = date, y = uempmed, showlegend = F)
p2 <- plot_ly(economics, x = date, y = unemploy, showlegend = F)
subplot(p1,p2)
subplot(plot_ly(g1),plot_ly(g2),nrows = 2)
subplot(plot_ly(g1),plot_ly(g2),ncol = 2)
g1
g2
ggplotly(g1)
g1
subplot(ggplotly(g1),ggplotly(g2))
subplot( plot_ly(g1), plot_ly(g2)    )
plotly_IMAGE(p, width = 480, height = 480, format = "png", scale = 2, out_file = "#92_SUBPLOT_plotly.png")
shiny::runApp('Desktop/updated ui and server')
runApp('R/Eralph & Sara Project')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
shiny::runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
runApp('Desktop/updated ui and server')
str(iris)
library(plotly)
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width)
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, type = "scatter")
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers")
p1
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers")
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers") %>%
add_trace(name = "Sepal")
p1
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers") %>%
add_trace(y = 2, name = "my line")
p1
p1 <- plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers", name = "Sepal") %>%
add_trace(y = 2, name = "my line")
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal")
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE)
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE) %>%
layout(xaxis = list(title = "a"),yaxis = list(title = "b"))
p2
p2 <- plot_ly(iris, x = Petal.Length, y = Petal.Width, mode = "markers", name = "Petal", showlegend = TRUE) %>%
layout(xaxis = list(title = "a"),yaxis = list(title = "b"), name = "hello")
p2
str(mtcars)
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p <- plot_ly(economics, x = date, y = unemploy / pop)
p
p <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "hello")
p
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
seq(0,8)
rnorm(8)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Blue Trace") %>%
add_trace(y = rnorm(8), name = "Orange Trace")
p1
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
p1
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,10), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(3,11), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(1,9), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(x = seq(0,9), y = rnorm(9), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
p2 < plot_ly(x = seq(0,8), y = rnorm(8), name = "Trace3") %>%
add_trace(y = rnorm(8), name = "Trace4")
p2 < plot_ly(iris, x = Sepal.Length, y = Sepal.Width, mode = "markers", name = "Trace3") %>%
add_trace(x = Petal.Length, y = Petal.Width, mode = "markers", name = "Trace4")
p2
p2 < plot_ly(economics, x = date, y = unemploy / pop, type = "scatter", mode = "markers+lines")
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p <- add_trace(p, y = fitted(m), name = "loess")
p
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
library(plotly)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = "Trace1") %>%
add_trace(y = rnorm(8), name = "Trace2")
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw") %>%
add_trace(p, y = fitted(m), name = "loess")
subplot(p1,p2, nrows = 2)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
my_names <- c("name1","name2","name3","name4")
my_names[1]
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[2])
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = "raw")
p2 <- add_trace(p, y = fitted(m), name = "loess")
p2
subplot(p1,p2, nrows = 2)
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
p2 <- plot_ly(economics, x = date, y = unemploy / pop, name = my_names[3])
p2 <- add_trace(p, y = fitted(m), name = my_names[4])
subplot(p1,p2, nrows = 2)
p1 <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
subplot(p1,p2, nrows = 2)
library(plotly)
my_names <- c("name1","name2","name3","name4")
plots <- list()
m <- loess(unemploy / pop ~ as.numeric(date), data = economics)
for (j in 1:2) {
plots[[2*j-1]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
plots[[2*j]] <- economics %>%
plot_ly(x = date, y = unemploy / pop, names = my_names[j]) %>%
add_trace(y = fitted(m), names = my_names[j])
}
for (j in 1:4) {
plots[[2*j-1]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
for (j in 1:4) {
plots[[j]] plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
plots[[1]]
for (j in 1:1) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
for (j in 2:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
for (j in 3:3) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[3]]
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
plots[[j]]
}
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
plots[[2]]
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[4])
do.call(subplot,c(plots,nrows=4))
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[2]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[3]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[4]) %>%
add_trace(y = rnorm(8), name = my_names[4])
do.call(subplot,c(plots,nrows=4))
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1])
plots[[1]]
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
do.call(subplot,c(plots,nrows=4))
for (j in 1:1) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
for (j in 2:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[2]]
for (j in 1:2) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
plots[[1]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[1]) %>%
add_trace(y = rnorm(8), name = my_names[1])
plots[[2]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[2]) %>%
add_trace(y = rnorm(8), name = my_names[2])
plots[[3]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[3]) %>%
add_trace(y = rnorm(8), name = my_names[3])
plots[[4]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[4]) %>%
add_trace(y = rnorm(8), name = my_names[4])
plots[[1]]
plots[[2]]
do.call(subplot,c(plots,nrows=4))
for (j in 1:4) {
plots[[j]] <- plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j])
}
plots[[1]]
do.call(subplot,c(plots,nrows=4))
list(1,2,3)
plots <- lapply(c(1,2,3,4), function(j) plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j]))
library(plotly)
plots <- lapply(c(1,2,3,4), function(j) plot_ly(x = seq(0, 8), y = rnorm(8), name = my_names[j]) %>%
add_trace(y = rnorm(8), name = my_names[j]))
do.call(subplot,c(plots,nrows=4))
1:4
